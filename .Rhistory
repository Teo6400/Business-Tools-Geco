---
title: "R Notebook"
library(readxl)
library(readxl)
library(forecast)
library(readxl)
library(forecast)
library(dplyr)
library(fpp2)
library(zoo) #al momento non in uso perché non riuscivo a far girare la funzione zoo
library(ggplot2)
library(fpp2)
library(lubridate)
library(stats) #se necessaria (magari nella ciclicità? al momento non c'è nulla che la usa)
ORO <- read.csv("C:/Users/famdr/Downloads/amCharts.csv")
# selezioniamo solo le colonne utili
ORO <- ORO%>%select(Date, close) #selezionate la colonna delle date e la colonna del prezzo di chiusura
# formattiamo la colonna Date di modo che sia riconosciuto che sono date
ORO$Date <- as.Date(ORO$Date, format = "%Y-%m-%d")
#eliminiamo le righe da prima del 20 Novembre 2014
ORO <- ORO %>% filter(Date >= as.Date("2014-11-20"))
#rinominiamo la colonna close con il nome "Prezzo"
names(ORO) <- c("Date", "Prezzo")
# Ordiniamo i dati per data crescente
ORO <- ORO[order(ORO$Date), ] #per precauzione più che altro perché erano già ordinati
# Crea una serie temporale con i dati NON DIFFERENZIATI, frequency = 365 perché sono dati giornalieri, qui f =260 perché mancano sabati, domeniche e festività.
ts_ORO_originale <- ts(ORO$Prezzo, start = c(2014,11), frequency = 260)  ##DA SISTEMARE!##
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", colors = "blue")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", colors = "blue")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "blue")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "blue", col.main = 'darkred')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "blue", col.main = 'red')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "blue", col.main = 'red')
box()
box()
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "blue", col.main = 'red')
box()
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "blue", col.main = 'red')
box()
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "blue", col.main = 'darkblue')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'darkblue')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'darkred')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "darkred", col.main = 'darkred')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'darkred')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'red')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'red', frame.plot = TRUE)
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'red', frame.plot = FALSE)
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'red', col.lab = "darkgreen")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'red', col.lab = "darkgreen")
box()
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'red', col.lab = "darkgreen", y_lab = 'prezzo')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'red', col.ylab = "darkgreen")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'black')
# Crea una serie temporale con i dati NON DIFFERENZIATI, frequency = 365 perché sono dati giornalieri, qui f =260 perché mancano sabati, domeniche e festività.
ts_ORO_originale <- ts(ORO$Prezzo, frequency = 260)  ##DA SISTEMARE!##
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'black')
# Crea una serie temporale con i dati NON DIFFERENZIATI, frequency = 365 perché sono dati giornalieri, qui f =260 perché mancano sabati, domeniche e festività.
ts_ORO_originale <- ts(ORO$Prezzo, start = c(2014,11,20), frequency = 260)  ##DA SISTEMARE!##
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'black')
# Crea una serie temporale con i dati NON DIFFERENZIATI, frequency = 365 perché sono dati giornalieri, qui f =260 perché mancano sabati, domeniche e festività.
ts_ORO_originale <- ts(ORO$Prezzo, start = c(2014), frequency = 260)
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'black')
ggplot(ORO, aes(x = Tempo, y = Prezzo)) +
geom_line(color = "blue") +  # Linea blu
ggtitle("Serie Storica prezzo dell'oro") +  # Titolo
xlab("Tempo") +  # Nome asse x
ylab("Prezzo") +  # Nome asse y
theme(
plot.title = element_text(color = "red", size = 14, face = "bold"),  # Titolo in rosso
axis.title.x = element_text(color = "darkgreen", size = 12),        # Nome asse x in verde
axis.title.y = element_text(color = "darkgreen", size = 12),        # Nome asse y in verde
panel.border = element_rect(color = "black", fill = NA, size = 1)   # Bordo nero intorno al grafico
)
ggplot(ORO, aes(x = "Tempo", y = "Prezzo")) +
geom_line(color = "blue") +  # Linea blu
ggtitle("Serie Storica prezzo dell'oro") +  # Titolo
xlab("Tempo") +  # Nome asse x
ylab("Prezzo") +  # Nome asse y
theme(
plot.title = element_text(color = "red", size = 14, face = "bold"),  # Titolo in rosso
axis.title.x = element_text(color = "darkgreen", size = 12),        # Nome asse x in verde
axis.title.y = element_text(color = "darkgreen", size = 12),        # Nome asse y in verde
panel.border = element_rect(color = "black", fill = NA, size = 1)   # Bordo nero intorno al grafico
)
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "red", col.main = 'black')
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "grey")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "darkgrey")
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "black")
#comando del prof per decomporre la serie
#----gira bene su Rnotebook, meno bello però intanto plotta tutto insieme se abbiamo problemi a visualizzare----#
ts_ORO_originale %>% stl(s.window="periodic", robust=T) %>% autoplot()
# Calcolo della media e della deviazione standard dei residui
mean_residuals <- mean(residuals, na.rm = TRUE)
sd_residuals <- sd(residuals, na.rm = TRUE)
mean_residuals <- mean(residuals, na.rm = TRUE)
sd_residuals <- sd(residuals, na.rm = TRUE)
qqnorm(residuals, main = "Q-Q Plot of Residuals", col = "blue")
library(readxl)
library(forecast)
library(dplyr)
library(fpp2)
library(zoo) #al momento non in uso perché non riuscivo a far girare la funzione zoo
library(ggplot2)
library(fpp2)
library(lubridate)
library(stats) #se necessaria (magari nella ciclicità? al momento non c'è nulla che la usa)
ORO <- read.csv("C:/Users/famdr/Downloads/amCharts.csv")
# selezioniamo solo le colonne utili
ORO <- ORO%>%select(Date, close) #selezionate la colonna delle date e la colonna del prezzo di chiusura
# formattiamo la colonna Date di modo che sia riconosciuto che sono date
ORO$Date <- as.Date(ORO$Date, format = "%Y-%m-%d")
#eliminiamo le righe da prima del 20 Novembre 2014
ORO <- ORO %>% filter(Date >= as.Date("2014-11-20"))
#rinominiamo la colonna close con il nome "Prezzo"
names(ORO) <- c("Date", "Prezzo")
# Ordiniamo i dati per data crescente
ORO <- ORO[order(ORO$Date), ] #per precauzione più che altro perché erano già ordinati
head(ORO) #un controllo veloce dei primi numeri e della classe delle colonne
# Crea una serie temporale con i dati NON DIFFERENZIATI, frequency = 365 perché sono dati giornalieri, qui f =260 perché mancano sabati, domeniche e festività.
ts_ORO_originale <- ts(ORO$Prezzo, start = c(2014), frequency = 260)
plot(ts_ORO_originale, main = "Serie Storica prezzo dell'oro", ylab = "Prezzo", xlab = "Tempo", col = "black")
# Decomposizione della serie temporale usando STL (Seasonal and Trend decomposition using Loess)
decomposition <- stl(ts_ORO_originale, s.window = "periodic", robust=T)
# comando che fa girare a benedetta
par(mfrow = c(4, 1), mar = c(2, 4, 2, 1))
# Grafico della serie temporale originale
plot(ts_ORO_originale, main = "Original Time Series for Gold Price", ylab = "Prezzo dell'Oro", col = "blue", lwd = 2)
plot(ts_ORO_originale, main = "Original Time Series for Gold Price", ylab = "Prezzo dell'Oro", col = "blue", lwd = 2)
# Grafico del Trend
plot(decomposition$time.series[, "trend"], main = "Trend", ylab = "Trend", col = "darkgreen", lwd = 2)
# Grafico della Componente Stagionale
plot(decomposition$time.series[, "seasonal"], main = "Seasonal",
ylab = "Seasonal", col = "purple", lwd = 2)
lines(x = c(1, length(decomposition$time.series[, "seasonal"])),
y = c(0, 0), col = "black", lty = 2, lwd = 1) # Linea orizzontale tratteggiata per y=0, solo per ordine, nessun valore aggiunto penso.
# Grafico dei Residui
plot(decomposition$time.series[, "remainder"], main = "Residuals",
ylab = "Residuals", col = "red", lwd = 2)
lines(x = c(1, length(decomposition$time.series[, "remainder"])),
y = c(0, 0), col = "black", lty = 2, lwd = 1) # Linea orizzontale tratteggiata per y=0.
# Ripristina le impostazioni grafiche di default (opzionale)
par(mfrow = c(1, 1))
# Residui dalla decomposizione STL
residuals <- decomposition$time.series[, "remainder"]
# Istogramma dei residui
ggplot(data = data.frame(residuals), aes(x = residuals)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.6) +
labs(title = "Residuals Histogram", x = "Residuals", y = "Relative Frequency") +
theme_minimal()
# Calcolo della media e della deviazione standard dei residui
mean_residuals <- mean(residuals, na.rm = TRUE)
sd_residuals <- sd(residuals, na.rm = TRUE)
ggplot(data = data.frame(residuals), aes(x = residuals)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mean_residuals, sd = sd_residuals),
color = "red", size = 1) +
labs(title = "Residuals Histogram with Gaussian Fit",
x = "Residuals", y = "Density") +
theme_minimal()
# Creazione del grafico con ggplot2
ggplot(data = data.frame(residuals), aes(x = residuals)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mean_residuals, sd = sd_residuals),
color = "red", linewidth = 1) +
labs(title = "Residuals Histogram with Gaussian Fit",
x = "Residuals", y = "Density") +
theme_minimal()
ggplot(data = data.frame(residuals), aes(x = residuals)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mean_residuals, sd = sd_residuals),
color = "red", linewidth = 1) +
labs(title = "Residuals Histogram with Gaussian Fit",
x = "Residuals", y = "Density") +
theme_minimal()
qqnorm(residuals, main = "Q-Q Plot of Residuals", col = "blue")
qqline(residuals, col = "red", lwd = 2)  # Aggiunge la linea di riferimento
acf(residuals, main = "ACF Plot of Residuals", col = "blue", lwd = 2)
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = FALSE)
df_acf <- data.frame(Lag = acf_data$lag, ACF = acf_data$acf) # Trasforma i dati in un dataframe
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'darkred')
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'darkred', size = 3)
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'darkred', linewidth = 3)
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'darkred', lwd = 3)
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'darkred', lwd = 3, alpha = 0.6)
# Crea il grafico personalizzato
plot(acf_data,
col = adjustcolor("darkred", alpha.f = 0.5),  # Linee principali con trasparenza
lwd = 3)  # Spessore delle linee principali
# Aumenta lo spessore delle linee di soglia
abline(h = c(-1.96 / sqrt(length(ts_ORO_originale)), 1.96 / sqrt(length(ts_ORO_originale))),
col = "blue",
lty = 2,
lwd = 2)  # Linee di soglia più spesse
# Crea il grafico personalizzato
plot(acf_data,
col = adjustcolor("darkred", alpha.f = 0.5),  # Linee principali con trasparenza
lwd = 3)  # Spessore delle linee principali
# Aumenta lo spessore delle linee di soglia
abline(h = c(-1.96 / sqrt(length(ts_ORO_originale)), 1.96 / sqrt(length(ts_ORO_originale))),
col = "blue",
lty = 2,
lwd = 2)  # Linee di soglia più spesse
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'red', lwd = 3, alpha = 0.6)
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'pink', lwd = 2)
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'skyblue', lwd = 2)
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, col = 'lightblue', lwd = 2)
ts_ORO_diff <- diff(ts_ORO_originale, differences = 1)
plot(ts_ORO_diff, main = "Serie Storica Differenziata 1 volta", ylab = "Prezzo", xlab = "Tempo")
#Autocorrelazione totale
acf(ts_ORO_diff, ylab = "ACF", xlab = "lag") #esce un grafico che non mi piace troppo
#Autocorrelazione totale
acf(ts_ORO_diff, ylab = "ACF", xlab = "lag", main = "Autocorrelazione serie storica differenziata 1 volta") #esce un grafico che non mi piace troppo
#Autocorrelazione serie storica originale
acf_data <- acf(ts_ORO_originale, plot = TRUE, lwd = 2)   #HO CAMBIATO IL COLORE in nero
df_acf <- data.frame(Lag = acf_data$lag, ACF = acf_data$acf) # Trasforma i dati in un dataframe
ggplot(df_acf, aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity", fill = "darkred", alpha = 0.7) +
labs(title = "Autocorrelazione", x = "Lag", y = "ACF")
#Autocorrelazione totale
acf(ts_ORO_diff, ylab = "ACF", xlab = "lag", main = "Autocorrelazione serie storica differenziata 1 volta") #esce un grafico che non mi piace troppo
#ACF dal file del prof
ggAcf(ts_ORO_diff,lag.max = 230)+theme_bw()+ylab(label="Total Students")+labs(title="Differenciated Total Students Sapienza")
#Autocorrelazione totale
ggAcf(ts_ORO_diff)+theme_bw()+ylab(label="Prezzo dell'oro")+labs(title="Autocorrelazione serie storica differenziata 1 volt")
#Autocorrelazione totale
acf(ts_ORO_diff, ylab = "ACF", xlab = "lag", main = "Autocorrelazione serie storica differenziata 1 volta")
#ACF dal file del prof
ggAcf(ts_ORO_diff)+theme_bw()+ylab(label="Prezzo dell'oro")+labs(title="Autocorrelazione serie storica differenziata 1 volt")
#rifacciamo il grafico acf con ggplot che viene più carino
acf_data <- acf(ts_ORO_diff, plot = FALSE)
df_acf <- data.frame(Lag = acf_data$lag, ACF = acf_data$acf) # Trasforma i dati in un dataframe
ggplot(df_acf, aes(x = Lag, y = ACF)) +
geom_bar(stat = "identity", fill = "darkblue", alpha = 0.7) +
labs(title = "Autocorrelazione differenziata 1 volta", x = "Lag", y = "ACF")
#ACF dal file del prof
ggAcf(ts_ORO_diff, lag.max = NULL)+theme_bw()+ylab(label="Prezzo dell'oro")+labs(title="Autocorrelazione serie storica differenziata 1 volta") +scale_x_continuous(breaks = seq(0, max(lag(ts_ORO_diff)), by = 1))
#ACF dal file del prof
ggAcf(ts_ORO_diff, lag.max = NULL)+theme_bw()+ylab(label="Prezzo dell'oro")+labs(title="Autocorrelazione serie storica differenziata 1 volta")
#Per vedere acf serie storica e pacf insieme
ggtsdisplay(ts_ORO_diff)
ggtsdisplay(ts_ORO_originale)
ggtsdisplay(ts_ORO_originale, main = "Serie storica del prezzo dell'ORO, autocorrelazione e autocorrelazione parziale")
ggtsdisplay(ts_ORO_originale, main = "Serie storica del prezzo dell'ORO: autocorrelazione e autocorrelazione parziale")
#Per vedere acf serie storica e pacf insieme
ggtsdisplay(ts_ORO_diff, main = "Serie storica differenziata 1 volta: autocorrelazione e autocorrelazione parziale")
ggtsdisplay(ts_ORO_originale, main = "Serie storica del prezzo dell'ORO: autocorrelazione e autocorrelazione parziale")
#Per vedere acf serie storica e pacf insieme
ggtsdisplay(ts_ORO_diff, main = "Serie storica differenziata 1 volta: autocorrelazione e autocorrelazione parziale")
ggAcf(decomposition_diff$time.series[, "remainder"])
#-- questa è un'idea, è da investigare la validità teorica --#
#Prova del ACF e altri grafici residui con serie differenziata 1 volta
decomposition_diff <- stl(ts_ORO_diff, s.window = "periodic", robust=T)
autoplot(decomposition_diff)
ggAcf(decomposition_diff$time.series[, "remainder"])
ggAcf(decomposition_diff$time.series[, "remainder"], main = 'Autocorrelazione dei residui della serie differenziata 1 volta')
# Serve a trovare il valore di p.
pacf(ts_ORO_diff, ylab = "PACF", xlab = "lag", plot = TRUE, main = "Autocorrelazione parziale della serie storica differenziata 1 volta")
# Dividiamo i dati di trend in set di addestramento e set di test
train_size <- floor(0.80 * nrow(ORO))  # 80% dei dati per l'addestramento
y_train <- ORO$Prezzo[1:train_size]  # Set di addestramento (80%)
y_test <- ORO$Prezzo[(train_size + 1):nrow(ORO)]  # Set di test (20%)
# Estraiamo la colonna delle date per il set di test
dates_test <- ORO$Date[(train_size + 1):nrow(ORO)]  # Data per il set di test
# Selezione automatica del miglior modello ARIMA
ARIMA_Model <- auto.arima(y_train, seasonal=TRUE)
print("Modello ARIMA selezionato automaticamente:")
print(ARIMA_Model)
# Dividiamo i dati di trend in set di addestramento e set di test
train_size <- floor(0.80 * nrow(ORO))  # 80% dei dati per l'addestramento
y_train <- ORO$Prezzo[1:train_size]  # Set di addestramento (80%)
y_test <- ORO$Prezzo[(train_size + 1):nrow(ORO)]  # Set di test (20%)
# Estraiamo la colonna delle date per il set di test
dates_test <- ORO$Date[(train_size + 1):nrow(ORO)]  # Data per il set di test
# Selezione automatica del miglior modello ARIMA
ARIMA_Model <- auto.arima(y_train, seasonal=TRUE)
print("Modello ARIMA selezionato automaticamente:")
print(ARIMA_Model)
# Creiamo una serie vuota per memorizzare i valori previsti (per la validazione walk-forward)
y_prediction_auto <- numeric(0)
history <- y_train
# Eseguiamo la previsione con la validazione walk-forward per il modello selezionato automaticamente
for (i in 1:length(y_test)) {
ARIMA_Model <- auto.arima(history, seasonal=TRUE)
next_prediction <- forecast(ARIMA_Model, h=1)$mean  # Predizione a 1 passo
y_prediction_auto <- c(y_prediction_auto, next_prediction)
history <- c(history, ORO$Prezzo[train_size + i])
}
# Creiamo un dataframe con le previsioni automatiche, i valori reali e le date
df_results_auto <- data.frame(
Date = dates_test,
Actual_Gold_Price = y_test,
Predicted_Gold_Price = y_prediction_auto
)
print(df_results_auto)
ORO <- ORO %>% filter(Date >= as.Date("2021-11-07"))
ORO <- ORO %>% filter(Date >= as.Date("2021-11-08"))
ORO <- ORO %>% filter(Date >= as.Date("2021-11-09"))
# Dividiamo i dati di trend in set di addestramento e set di test
train_size <- floor(0.80 * nrow(ORO))  # 80% dei dati per l'addestramento
y_train <- ORO$Prezzo[1:train_size]  # Set di addestramento (80%)
y_test <- ORO$Prezzo[(train_size + 1):nrow(ORO)]  # Set di test (20%)
# Estraiamo la colonna delle date per il set di test
dates_test <- ORO$Date[(train_size + 1):nrow(ORO)]  # Data per il set di test
# Selezione automatica del miglior modello ARIMA
ARIMA_Model <- auto.arima(y_train, seasonal=TRUE)
print("Modello ARIMA selezionato automaticamente:")
print(ARIMA_Model)
# Creiamo una serie vuota per memorizzare i valori previsti (per la validazione walk-forward)
y_prediction_auto <- numeric(0)
history <- y_train
# Eseguiamo la previsione con la validazione walk-forward per il modello selezionato automaticamente
for (i in 1:length(y_test)) {
ARIMA_Model <- auto.arima(history, seasonal=TRUE)
next_prediction <- forecast(ARIMA_Model, h=1)$mean  # Predizione a 1 passo
y_prediction_auto <- c(y_prediction_auto, next_prediction)
history <- c(history, ORO$Prezzo[train_size + i])
}
# Creiamo un dataframe con le previsioni automatiche, i valori reali e le date
df_results_auto <- data.frame(
Date = dates_test,
Actual_Gold_Price = y_test,
Predicted_Gold_Price = y_prediction_auto
)
print(df_results_auto)
# Calcoliamo l'errore assoluto medio (MAE) per il modello automatico
mae_auto <- mean(abs(df_results_auto$Actual_Gold_Price - df_results_auto$Predicted_Gold_Price))
print(paste("Errore Assoluto Medio (MAE) - Modello automatico:", mae_auto))
# Calcolo del RMSE
rmse_auto <- sqrt(mean((df_results_auto$Actual_Gold_Price - df_results_auto$Predicted_Gold_Price)^2))
print(paste("Errore Quadratico Medio (RMSE) - Modello automatico:", rmse_auto))
# Mostriamo il dataframe con i risultati del modello manuale
print("Risultati modello manuale:")
print(df_results_manual)
# Ora utilizziamo i parametri manuali scelti (puoi sostituirli con quelli selezionati o altri)
# Parametri manuali scelti
p_manual <- 16
d_manual <- 1
q_manual <- 4
# Creiamo una serie vuota per memorizzare i valori previsti (per la validazione walk-forward)
y_prediction_manual <- numeric(0)
history <- y_train  # Set iniziale di addestramento
for (i in 1:length(y_test)) {
# Creiamo e alleniamo il modello ARIMA con i parametri manuali su history
ARIMA_Manual_Model <- Arima(history, order=c(p_manual, d_manual, q_manual), seasonal=TRUE)
# Effettuiamo la previsione per il prossimo timestamp
next_prediction <- forecast(ARIMA_Manual_Model, h=1)$mean
# Aggiungiamo la previsione alla serie delle predizioni
y_prediction_manual <- c(y_prediction_manual, next_prediction)
# Aggiorniamo il set di addestramento aggiungendo il prossimo valore dei dati
history <- c(history, ORO$Prezzo[train_size + i])
}
# Ora utilizziamo i parametri manuali scelti (puoi sostituirli con quelli selezionati o altri)
# Parametri manuali scelti
p_manual <- 2
d_manual <- 1
q_manual <- 4
# Creiamo una serie vuota per memorizzare i valori previsti (per la validazione walk-forward)
y_prediction_manual <- numeric(0)
history <- y_train  # Set iniziale di addestramento
# Eseguiamo la previsione con la validazione walk-forward per il modello ARIMA manuale
for (i in 1:length(y_test)) {
# Creiamo e alleniamo il modello ARIMA con i parametri manuali su history
ARIMA_Manual_Model <- Arima(history, order=c(p_manual, d_manual, q_manual), seasonal=TRUE)
# Effettuiamo la previsione per il prossimo timestamp
next_prediction <- forecast(ARIMA_Manual_Model, h=1)$mean
# Aggiungiamo la previsione alla serie delle predizioni
y_prediction_manual <- c(y_prediction_manual, next_prediction)
# Aggiorniamo il set di addestramento aggiungendo il prossimo valore dei dati
history <- c(history, ORO$Prezzo[train_size + i])
}
install.packages("tseries")
library(tseries)
# Dividiamo i dati in set di addestramento e set di test
train_size <- floor(0.80 * nrow(ORO))  # 80% per l'addestramento
y_train <- ORO$Prezzo[1:train_size]  # Set di addestramento (80%)
y_test <- ORO$Prezzo[(train_size + 1):nrow(ORO)]  # Set di test (20%)
dates_test <- ORO$Date[(train_size + 1):nrow(ORO)]  # Date per il set di test
# Verifica la stagionalità e la differenziazione
adf_test <- adf.test(y_train)
print(adf_test)
# Se la serie non è stazionaria, si consiglia di differenziarla
if (adf_test$p.value > 0.05) {
print("La serie non è stazionaria. Applicando la differenziazione...")
y_train_diff <- diff(y_train)  # Differenziazione per rendere la serie stazionaria
} else {
y_train_diff <- y_train
}
adf_test <- adf.test(y_train)
print(adf_test)
# Se la serie non è stazionaria, si consiglia di differenziarla
if (adf_test$p.value > 0.05) {
print("La serie non è stazionaria. Applicando la differenziazione...")
y_train_diff <- diff(y_train)  # Differenziazione per rendere la serie stazionaria
} else {
y_train_diff <- y_train
}
#ARIMA(1,1,3)
model10 = Arima(ORO$Prezzo,c(1,1,4),seasonal = NULL,include.mean = T,
include.drift = F,
include.constant = F,
method = "CSS")
library(readxl)
library(forecast)
library(forecast)
library(dplyr)
library(fpp2)
library(fpp2)
library(zoo) #al momento non in uso perché non riuscivo a far girare la funzione zoo
library(ggplot2)
library(fpp2)
library(lubridate)
library(lubridate)
library(stats) #se necessaria (magari nella ciclicità? al momento non c'è nulla che la usa)
ORO <- read.csv("C:/Users/famdr/Downloads/amCharts.csv")
#ARIMA(1,1,3)
model10 = Arima(ORO$Prezzo,c(1,1,4),seasonal = NULL,include.mean = T,
include.drift = F,
include.constant = F,
method = "CSS")
# selezioniamo solo le colonne utili
ORO <- ORO%>%select(Date, close) #selezionate la colonna delle date e la colonna del prezzo di chiusura
# formattiamo la colonna Date di modo che sia riconosciuto che sono date
ORO$Date <- as.Date(ORO$Date, format = "%Y-%m-%d")
#eliminiamo le righe da prima del 20 Novembre 2014
ORO <- ORO %>% filter(Date >= as.Date("2014-11-20"))
#rinominiamo la colonna close con il nome "Prezzo"
names(ORO) <- c("Date", "Prezzo")
# Ordiniamo i dati per data crescente
ORO <- ORO[order(ORO$Date), ] #per precauzione più che altro perché erano già ordinati
ORO_cut <- ORO %>% filter(Date >= as.Date("2021-11-09")) #(3 anni/periodi, ognuno da 261 osservazioni)
ORO <- ORO %>% filter(Date >= as.Date("2021-11-09")) #(3 anni/periodi, ognuno da 261 osservazioni)
#ARIMA(1,1,3)
model10 = Arima(ORO$Prezzo,c(1,1,4),seasonal = NULL,include.mean = T,
include.drift = F,
include.constant = F,
method = "CSS")
#model1$fitted
autoplot(forecast(model10))
model1$fitted
model10$fitted
